import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import sqlite3
import json
from datetime import datetime
import uuid
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
BOTNAME = os.getenv('BOT_NAME')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('digital_imprints.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            imprint_id TEXT UNIQUE,
            name TEXT,
            creation_date TEXT,
            last_update TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS memories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            content TEXT,
            timestamp TEXT,
            type TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('digital_imprints.db')
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    c.execute('SELECT imprint_id FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    
    if not result:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π imprint_id
        imprint_id = str(uuid.uuid4())
        c.execute('''
            INSERT INTO users (user_id, imprint_id, name, creation_date, last_update)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, imprint_id, update.effective_user.full_name, 
              datetime.now().isoformat(), datetime.now().isoformat()))
        conn.commit()
    else:
        imprint_id = result[0]
    
    conn.close()
    
    welcome_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ '–ü–æ—Å–º–µ—Ä—Ç–∏–µ'!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–ª–µ–ø–æ–∫ —Å–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏, "
        "—Å–æ—Ö—Ä–∞–Ω—è—è —Å–≤–æ–∏ –º—ã—Å–ª–∏, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –∑–Ω–∞–Ω–∏—è.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add_memory - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –º—ã—Å–ª—å\n"
        "/view_memories - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/get_link - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–ª–µ–ø–æ–∫\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    
    await update.message.reply_text(welcome_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_memory
async def add_memory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
        "–∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–º —Å–ª–µ–ø–∫–µ."
    )
    context.user_data['waiting_for_memory'] = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def save_memory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('waiting_for_memory'):
        return
    
    user_id = update.effective_user.id
    content = update.message.text
    
    conn = sqlite3.connect('digital_imprints.db')
    c = conn.cursor()
    
    c.execute('''
        INSERT INTO memories (user_id, content, timestamp, type)
        VALUES (?, ?, ?, ?)
    ''', (user_id, content, datetime.now().isoformat(), 'text'))
    
    c.execute('''
        UPDATE users 
        SET last_update = ? 
        WHERE user_id = ?
    ''', (datetime.now().isoformat(), user_id))
    
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        "–í–∞—à–∞ –º—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /done, "
        "–∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_memories
async def view_memories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('digital_imprints.db')
    c = conn.cursor()
    
    c.execute('''
        SELECT content, timestamp 
        FROM memories 
        WHERE user_id = ? 
        ORDER BY timestamp DESC 
        LIMIT 5
    ''', (user_id,))
    
    memories = c.fetchall()
    conn.close()
    
    if not memories:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_memory, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ!"
        )
        return
    
    message = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for memory in memories:
        content, timestamp = memory
        date = datetime.fromisoformat(timestamp).strftime("%Y-%m-%d %H:%M")
        message += f"üìù {date}\n{content}\n\n"
    
    await update.message.reply_text(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_link
async def get_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('digital_imprints.db')
    c = conn.cursor()
    
    c.execute('SELECT imprint_id FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    
    if result:
        imprint_id = result[0]
        link = f"t.me/{BOTNAME}?start={imprint_id}"
        await update.message.reply_text(
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–ª–µ–ø–æ–∫:\n{link}\n\n"
            "–ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, "
            "–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≤–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'waiting_for_memory' in context.user_data:
        del context.user_data['waiting_for_memory']
    await update.message.reply_text(
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view_memories, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ, "
        "–∏–ª–∏ /add_memory, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add_memory - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/view_memories - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/get_link - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–ª–µ–ø–æ–∫\n"
        "/done - –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_memory", add_memory))
    application.add_handler(CommandHandler("view_memories", view_memories))
    application.add_handler(CommandHandler("get_link", get_link))
    application.add_handler(CommandHandler("done", done))
    application.add_handler(CommandHandler("help", help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_memory))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()